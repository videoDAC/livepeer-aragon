{"version":3,"sources":["../truffle-config.js"],"names":["require","module","exports","networks","development","host","port","network_id","mocha","compilers","solc","version"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;;AAEAA,QAAQ,gBAAR;AACAA,QAAQ,gBAAR;;AAEAC,OAAOC,OAAP,GAAiB;AACf;;;;;;;;;;AAUAC,YAAU;AACR;AACA;AACA;AACA;AACA;AACA;AACAC,iBAAa;AACZC,YAAM,WADM,EACW;AACvBC,YAAM,IAFM,EAEW;AACvBC,kBAAY,GAHA,CAGW;AAHX;;AAMb;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACF;;AAEA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACF;;AAEA;AACA;AACE;AACA;AACA;AACF;AAvCQ,GAXK;;AAqDf;AACAC,SAAO;AACL;AADK,GAtDQ;;AA0Df;AACAC,aAAW;AACTC,UAAM;AACJC,eAAS,QADL,CACkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATI;AADG;AA3DI,CAAjB","file":"truffle-config.js","sourcesContent":["/**\n * Use this file to configure your truffle project. It's seeded with some\n * common settings for different networks and features like migrations,\n * compilation and testing. Uncomment the ones you need or modify\n * them to suit your project as necessary.\n *\n * More information about configuration can be found at:\n *\n * truffleframework.com/docs/advanced/configuration\n *\n * To deploy via Infura you'll need a wallet provider (like truffle-hdwallet-provider)\n * to sign your transactions before they're sent to a remote public node. Infura API\n * keys are available for free at: infura.io/register\n *\n * You'll also need a mnemonic - the twelve word phrase the wallet uses to generate\n * public/private key pairs. If you're publishing your code to GitHub make sure you load this\n * phrase from a file you've .gitignored so it doesn't accidentally become public.\n *\n */\n\n// const HDWalletProvider = require('truffle-hdwallet-provider');\n// const infuraKey = \"fj4jll3k.....\";\n//\n// const fs = require('fs');\n// const mnemonic = fs.readFileSync(\".secret\").toString().trim();\n\nrequire('babel-register');\nrequire('babel-polyfill');\n\nmodule.exports = {\n  /**\n   * Networks define how you connect to your ethereum client and let you set the\n   * defaults web3 uses to send transactions. If you don't specify one truffle\n   * will spin up a development blockchain for you on port 9545 when you\n   * run `develop` or `test`. You can ask a truffle command to use a specific\n   * network from the command line, e.g\n   *\n   * $ truffle test --network <network-name>\n   */\n\n  networks: {\n    // Useful for testing. The `development` name is special - truffle uses it by default\n    // if it's defined here and no other network is specified at the command line.\n    // You should run a client (like ganache-cli, geth or parity) in a separate terminal\n    // tab if you use this network and you must also set the `host`, `port` and `network_id`\n    // options below to some value.\n    //\n    development: {\n     host: \"127.0.0.1\",     // Localhost (default: none)\n     port: 8545,            // Standard Ethereum port (default: none)\n     network_id: \"*\",       // Any network (default: none)\n    },\n\n    // Another network with more advanced options...\n    // advanced: {\n      // port: 8777,             // Custom port\n      // network_id: 1342,       // Custom network\n      // gas: 8500000,           // Gas sent with each transaction (default: ~6700000)\n      // gasPrice: 20000000000,  // 20 gwei (in wei) (default: 100 gwei)\n      // from: <address>,        // Account to send txs from (default: accounts[0])\n      // websockets: true        // Enable EventEmitter interface for web3 (default: false)\n    // },\n\n    // Useful for deploying to a public network.\n    // NB: It's important to wrap the provider as a function.\n    // ropsten: {\n      // provider: () => new HDWalletProvider(mnemonic, `https://ropsten.infura.io/${infuraKey}`),\n      // network_id: 3,       // Ropsten's id\n      // gas: 5500000,        // Ropsten has a lower block limit than mainnet\n      // confirmations: 2,    // # of confs to wait between deployments. (default: 0)\n      // timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)\n      // skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )\n    // },\n\n    // Useful for private networks\n    // private: {\n      // provider: () => new HDWalletProvider(mnemonic, `https://network.io`),\n      // network_id: 2111,   // This network is yours, in the cloud.\n      // production: true    // Treats this network as if it was a public net. (default: false)\n    // }\n  },\n\n  // Set default mocha options here, use special reporters etc.\n  mocha: {\n    // timeout: 100000\n  },\n\n  // Configure your compilers\n  compilers: {\n    solc: {\n      version: \"0.4.24\",    // Fetch exact version from solc-bin (default: truffle's version)\n      // docker: true,        // Use \"0.5.1\" you've installed locally with docker (default: false)\n      // settings: {          // See the solidity docs for advice about optimization and evmVersion\n      //  optimizer: {\n      //    enabled: false,\n      //    runs: 200\n      //  },\n      //  evmVersion: \"byzantium\"\n      // }\n    }\n  }\n}\n"]}