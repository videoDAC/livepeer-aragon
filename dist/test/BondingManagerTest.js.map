{"version":3,"sources":["../../test/BondingManagerTest.js"],"names":["BondingManager","artifacts","require","SortedDoublyLL","contract","fixture","bondingManager","NUM_TRANSCODERS","NUM_ACTIVE_TRANSCODERS","UNBONDING_PERIOD","MAX_EARNINGS_CLAIMS_ROUNDS","PERC_DIVISOR","PERC_MULTIPLIER","before","Fixture","web3","deploy","deployAndRegister","controller","address","gas","beforeEach","afterEach","describe","it"],"mappings":";;AAAA;;;;AACA;;;;;;;;AAEA;AACA;;AAEA,IAAMA,iBAAiBC,UAAUC,OAAV,CAAkB,gBAAlB,CAAvB;AACA,IAAMC,iBAAiBF,UAAUC,OAAV,CAAkB,gBAAlB,CAAvB;;AAEA;;;AAGAE,SAAS,gBAAT,EAA2B,oBAAY;AACnC,QAAIC,gBAAJ;AACA,QAAIC,uBAAJ;;AAEA,QAAMC,kBAAkB,CAAxB;AACA,QAAMC,yBAAyB,CAA/B;AACA,QAAMC,mBAAmB,CAAzB;AACA,QAAMC,6BAA6B,EAAnC;;AAEA,QAAMC,eAAe,OAArB;AACA,QAAMC,kBAAkBD,eAAe,GAAvC;;AAEAE,mEAAO;AAAA;AAAA;AAAA;AAAA;AACHR,kCAAU,IAAIS,iBAAJ,CAAYC,IAAZ,CAAV;AADG;AAAA,+BAEGV,QAAQW,MAAR,EAFH;;AAAA;AAAA;AAAA,+BASoBX,QAAQY,iBAAR,CAA0BjB,cAA1B,EAA0C,gBAA1C,EAA4DK,QAAQa,UAAR,CAAmBC,OAA/E,EAAwF,EAACC,KAAK,SAAN,EAAxF,CATpB;;AAAA;AASHd,sCATG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAWI;AACA;AACA;AACA;AAdJ;;AAiBAe,uEAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AACI;AADJ;;AAIAC,sEAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;AACI;AADJ;;AAIAC,aAAS,gBAAT,EAA2B,YAAM;;AAE7BC,WAAG,gBAAH,0DAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;AAGH,KALD;AAOH,CA5CD","file":"BondingManagerTest.js","sourcesContent":["import Fixture from \"./helpers/Fixture\"\nimport expectThrow from \"./helpers/expectThrow\"\n\n// import {contractId, functionSig, functionEncodedABI} from \"../../utils/helpers\"\n// import {constants} from \"../../utils/constants\"\n\nconst BondingManager = artifacts.require(\"BondingManager\")\nconst SortedDoublyLL = artifacts.require(\"SortedDoublyLL\")\n\n// const {DelegatorStatus, TranscoderStatus} = constants\n\n\ncontract(\"BondingManager\", accounts => {\n    let fixture\n    let bondingManager\n\n    const NUM_TRANSCODERS = 5\n    const NUM_ACTIVE_TRANSCODERS = 2\n    const UNBONDING_PERIOD = 2\n    const MAX_EARNINGS_CLAIMS_ROUNDS = 20\n\n    const PERC_DIVISOR = 1000000\n    const PERC_MULTIPLIER = PERC_DIVISOR / 100\n\n    before(async () => {\n        fixture = new Fixture(web3)\n        await fixture.deploy()\n\n        // const sortedDoublyLL = await SortedDoublyLL.new()\n        // await BondingManager.link(\"SortedDoublyLL\", sortedDoublyLL.address)\n\n        // bondingManager = await BondingManager.new(\"0x0000000000000000000000000000000000000000\")\n\n        bondingManager = await fixture.deployAndRegister(BondingManager, \"BondingManager\", fixture.controller.address, {gas: 999000000})\n\n        // await bondingManager.setUnbondingPeriod(UNBONDING_PERIOD)\n        // await bondingManager.setNumTranscoders(NUM_TRANSCODERS)\n        // await bondingManager.setNumActiveTranscoders(NUM_ACTIVE_TRANSCODERS)\n        // await bondingManager.setMaxEarningsClaimsRounds(MAX_EARNINGS_CLAIMS_ROUNDS)\n    })\n\n    beforeEach(async () => {\n        // await fixture.setUp()\n    })\n\n    afterEach(async () => {\n        // await fixture.tearDown()\n    })\n\n    describe(\"BondingManager\", () => {\n\n        it(\"does something\", async () => {\n\n        })\n    })\n\n})"]}